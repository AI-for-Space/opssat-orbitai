######################
# NMF App Properties #
######################

# Training mode:
# - 0: Online machine learning with the MochiMochi library.
# - 1: Random Forest with the ranger library.
esa.mo.nmf.apps.OrbitAI.mode=0

# Number of iterations the experiment should last.
esa.mo.nmf.apps.OrbitAI.iterations=1000

# Time interval between 2 iterations in seconds.
esa.mo.nmf.apps.OrbitAI.interval=5

# OBSW parameters for which the publishing will be enabled in NMF supervisor.
esa.mo.nmf.apps.OrbitAI.inputs=CADC0894,CADC0884,CADC0885,CADC0886

################################
# MochiMochi - Online Learning #
################################

# MochiMochi mode:
#  - 0 will train new models from scratch
#  - 1 will continue to train existing models
#  - 2 will use the trained models for inference
esa.mo.nmf.apps.OrbitAI.mochi.mode=0

# Port at which the Mochi server will be listening.
esa.mo.nmf.apps.OrbitAI.mochi.port=9999

# Flag indicating whether or not training data will be logged into a CSV file.
esa.mo.nmf.apps.OrbitAI.mochi.log.data.training=1

# A Method for Stochastic Optimization.
esa.mo.nmf.apps.OrbitAI.mochi.ADAM=1

# Adaptive Subgradient Methods for Online Learning and Stochastic Optimization.
esa.mo.nmf.apps.OrbitAI.mochi.ADAGRAD_RDA=1
esa.mo.nmf.apps.OrbitAI.mochi.ADAGRAD_RDA.hparam.eta=0.1
esa.mo.nmf.apps.OrbitAI.mochi.ADAGRAD_RDA.hparam.lambda=0.000001

# Adaptive Regularization of Weight Vectors.
esa.mo.nmf.apps.OrbitAI.mochi.AROW=1
esa.mo.nmf.apps.OrbitAI.mochi.AROW.hparam.r=0.8

#  Exact Soft Confidence-Weighted Learning.
esa.mo.nmf.apps.OrbitAI.mochi.SCW=1
esa.mo.nmf.apps.OrbitAI.mochi.SCW.hparam.eta=0.95

# Normal Herd (Learning via Gaussian Herding) with full diagonal covariance.
esa.mo.nmf.apps.OrbitAI.mochi.NHERD=1
esa.mo.nmf.apps.OrbitAI.mochi.NHERD.hparam.c=0.1
esa.mo.nmf.apps.OrbitAI.mochi.NHERD.hparam.diagonal=0

# Passive Aggressive. Three variants: PA, PA-I, PA-II.
esa.mo.nmf.apps.OrbitAI.mochi.PA=1
esa.mo.nmf.apps.OrbitAI.mochi.PA.hparam.variant=1
esa.mo.nmf.apps.OrbitAI.mochi.PA.hparam.c=0.1

##########################
# ranger - Random Forest #
##########################

# ranger mode:
#    - 0 will collect data in a CSV file to be later used as training data.
#    - 1 will train a model given a CSV file with training data.
#    - 2 will will do in-line inference given input values as command arguments.
#    - 3 will will do batch inference given a CSV file with data inputs.
esa.mo.nmf.apps.OrbitAI.ranger.mode=0

# Comma separated list of variable to include when training or predicting.
# (Default: esa.mo.nmf.apps.OrbitAI.inputs)
esa.mo.nmf.apps.OrbitAI.ranger.includevars=CADC0894,CADC0884,CADC0885,CADC0886

# Set tree type to:
#    - 1: Classification.
#    - 3: Regression.
#    - 5: Survival.
# (Default: 1)
esa.mo.nmf.apps.OrbitAI.ranger.treetype=1

# Grow a Classification forest with probability estimation for the classes.
# Use in combination with --treetype 1.
#esa.mo.nmf.apps.OrbitAI.ranger.probability=1

# Name of dependent variable. For survival trees this is the time variable.
esa.mo.nmf.apps.OrbitAI.ranger.depvarname=label

# Name of status variable, only applicable for survival trees.
# Coding is 1 for event and 0 for censored.
#esa.mo.nmf.apps.OrbitAI.ranger.statusvarname=NAME

# Set number of trees to N.
# (Default: 500)
esa.mo.nmf.apps.OrbitAI.ranger.ntree=10

# Number of variables to possibly split at in each node.
# (Default: sqrt(p) with p = number of independent variables)
#esa.mo.nmf.apps.OrbitAI.ranger.mtry=N

# Set minimal node size to N.
# For Classification and Regression growing is stopped if a node reaches a size smaller than N.
# For Survival growing is stopped if one child would reach a size smaller than N.
# This means nodes with size smaller N can occur for Classification and Regression.
# (Default: 1 for Classification, 5 for Regression, and 3 for Survival)
#esa.mo.nmf.apps.OrbitAI.ranger.targetpartitionsize=1

# Set maximal tree depth to N.
# Set to 0 for unlimited depth. A value of 1 corresponds to tree stumps (1 split).
#esa.mo.nmf.apps.OrbitAI.ranger.maxdepth=N

# Comma separated list of names of (unordered) categorical variables. 
# Categorical variables must contain only positive integer values.
#esa.mo.nmf.apps.OrbitAI.ranger.catvars=V1,V2,...

# Save forest to file <outprefix>.forest.
# This property should always be set the true for the purposes of OrbitAI.
esa.mo.nmf.apps.OrbitAI.ranger.write=1

# Load forest from FILE and predict with new data. The new data is expected in the exact same 
# shape as the training data. If the outcome of your new dataset is unknown, add a dummy column.
esa.mo.nmf.apps.OrbitAI.ranger.predict=ranger_out.forest

# Return a matrix with individual predictions for each tree instead of aggregated 
# predictions for all trees (classification and regression only).
#esa.mo.nmf.apps.OrbitAI.ranger.predall=1

# Set type of prediction to:
#    - 1: Return predicted classes or values.
#    - 2: Return terminal node IDs per tree for new observations.
# (Default: 1)
#esa.mo.nmf.apps.OrbitAI.ranger.predictiontype=1

#Set importance mode to:
#    - 0: none.
#    - 1: Node impurity: Gini for Classification, variance for Regression, sum of test statistic for Survival.
#    - 2: Permutation importance, scaled by standard errors.
#    - 3: Permutation importance, no scaling.
#    - 5: Corrected node impurity: Bias-corrected version of node impurity importance.
#    - 6: Local (casewise) permutation importance.
#(Default: 0)
#esa.mo.nmf.apps.OrbitAI.ranger.impmeasure=0

# Sample without replacement.
#esa.mo.nmf.apps.OrbitAI.ranger.noreplace=1

# Fraction of observations to sample. Default is 1 for sampling with replacement 
# and 0.632 for sampling without replacement.
#esa.mo.nmf.apps.OrbitAI.ranger.fraction=X

#Splitting rule:
#    - 1: Gini for Classification, variance for Regression, logrank for Survival.
#    - 2: AUC for Survival, not available for Classification and Regression.
#    - 3: AUC (ignore ties) for Survival, not available for Classification and Regression.
#    - 4: MAXSTAT for Survival and Regression, not available for Classification.
#    - 5: ExtraTrees for all tree types.
#    - 6: BETA for regression, only for (0,1) bounded outcomes.
#    - 7: Hellinger for Classification, not available for Regression and Survival.
# (Default: 1)
#esa.mo.nmf.apps.OrbitAI.ranger.splitrule=1

# Number of random splits to consider for each splitting variable (ExtraTrees splitrule only).
#esa.mo.nmf.apps.OrbitAI.ranger.randomsplits=N

# Significance threshold to allow splitting (MAXSTAT splitrule only).
#esa.mo.nmf.apps.OrbitAI.ranger.alpha=VAL

# Lower quantile of covariate distribtuion to be considered for splitting (MAXSTAT splitrule only).
#esa.mo.nmf.apps.OrbitAI.ranger.minprop=VAL

# Filename of case weights file.
#esa.mo.nmf.apps.OrbitAI.ranger.caseweights=FILE

# Hold-out mode. Hold-out all samples with case weight 0 and use these for variable
# importance and prediction error.
#esa.mo.nmf.apps.OrbitAI.ranger.holdout=1

# Filename of split select weights file.
#esa.mo.nmf.apps.OrbitAI.ranger.splitweights=FILE

# Comma separated list of variable names to be always considered for splitting.
#esa.mo.nmf.apps.OrbitAI.ranger.alwayssplitvars=V1,V2,...

# Comma separated list of regularization coefficients (one for all variables or one for each variable).
#esa.mo.nmf.apps.OrbitAI.ranger.regcoef=r1,r2,...

# Use node depth for regularization.
#esa.mo.nmf.apps.OrbitAI.ranger.usedepth=1

# Skip computation of OOB error.
#esa.mo.nmf.apps.OrbitAI.ranger.skipoob=1

# Set number of parallel threads to N.
# (Default: Number of CPUs available)
#esa.mo.nmf.apps.OrbitAI.ranger.nthreads=N

# Set random seed to SEED.
# (Default: No seed)
#esa.mo.nmf.apps.OrbitAI.ranger.seed=SEED

# Prefix for output files
#esa.mo.nmf.apps.OrbitAI.ranger.outprefix=PREFIX

# Set memory mode to:
#    - 0: double.
#    - 1: float.
#    - 2: char.
# (Default: 0)
#esa.mo.nmf.apps.OrbitAI.ranger.memmode=0
                                  
# Use memory saving (but slower) splitting mode.
#esa.mo.nmf.apps.OrbitAI.ranger.savemem=1